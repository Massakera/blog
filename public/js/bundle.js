/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/ts/animation.ts":
/*!********************************!*\
  !*** ./assets/ts/animation.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimationManager: () => (/* binding */ AnimationManager)\n/* harmony export */ });\nvar AnimationManager = /** @class */ (function () {\n    function AnimationManager() {\n        this.defaultOptions = {\n            selector: '.animate-on-scroll',\n            threshold: 0.1,\n            rootMargin: '0px',\n            animationClass: 'visible'\n        };\n    }\n    AnimationManager.prototype.init = function () {\n        this.setupScrollAnimations(this.defaultOptions);\n        this.animateHeaderText();\n    };\n    AnimationManager.prototype.setupScrollAnimations = function (options) {\n        var elements = document.querySelectorAll(options.selector);\n        if (elements.length === 0)\n            return;\n        var observer = new IntersectionObserver(function (entries) {\n            entries.forEach(function (entry) {\n                if (entry.isIntersecting) {\n                    entry.target.classList.add(options.animationClass);\n                }\n                else {\n                    // Optionally remove the class when out of view\n                    // entry.target.classList.remove(options.animationClass);\n                }\n            });\n        }, {\n            threshold: options.threshold,\n            rootMargin: options.rootMargin\n        });\n        elements.forEach(function (el) { return observer.observe(el); });\n    };\n    AnimationManager.prototype.animateHeaderText = function () {\n        var siteTitle = document.querySelector('.site-name');\n        if (!siteTitle)\n            return;\n        var text = siteTitle.textContent || '';\n        siteTitle.textContent = '';\n        var i = 0;\n        var typeSpeed = 100;\n        var typeWriter = function () {\n            if (i < text.length) {\n                siteTitle.textContent += text.charAt(i);\n                i++;\n                setTimeout(typeWriter, typeSpeed);\n            }\n        };\n        setTimeout(typeWriter, 500);\n    };\n    return AnimationManager;\n}());\n\n\n\n//# sourceURL=webpack://blog/./assets/ts/animation.ts?");

/***/ }),

/***/ "./assets/ts/keyboard-nav.ts":
/*!***********************************!*\
  !*** ./assets/ts/keyboard-nav.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyboardNavigation: () => (/* binding */ KeyboardNavigation)\n/* harmony export */ });\nvar KeyboardNavigation = /** @class */ (function () {\n    function KeyboardNavigation() {\n        var _this = this;\n        this.SCROLL_AMOUNT = 100; // pixels to scroll\n        // Track state for link selection mode\n        this.linkHintsActive = false;\n        this.postLinks = [];\n        this.linkHintsMap = new Map();\n        // Handle key up events to hide the help modal when ? is released\n        this.handleKeyUp = function (event) {\n            if (event.key === '?') {\n                _this.hideHelpModal();\n            }\n        };\n    }\n    KeyboardNavigation.prototype.init = function () {\n        document.addEventListener('keydown', this.handleKeyPress.bind(this));\n        document.addEventListener('keyup', this.handleKeyUp);\n        this.addKeyboardShortcutsInfo();\n        this.addKeyboardHint();\n        // First-time notice removed for minimalist design\n    };\n    KeyboardNavigation.prototype.handleKeyPress = function (event) {\n        // Skip if user is typing in an input, textarea, etc.\n        if (this.isUserTyping()) {\n            return;\n        }\n        // If we're in link selection mode, check for number keys\n        if (this.linkHintsActive) {\n            // If it's a number key\n            if (/^[0-9]$/.test(event.key)) {\n                var targetLink = this.linkHintsMap.get(event.key);\n                if (targetLink) {\n                    targetLink.click();\n                    this.deactivateLinkHints();\n                    event.preventDefault();\n                }\n            }\n            else if (event.key === 'Escape') {\n                // Cancel link selection mode with Escape\n                this.deactivateLinkHints();\n                event.preventDefault();\n            }\n            return;\n        }\n        switch (event.key) {\n            // Vim-like navigation\n            case 'j': // Scroll down\n                this.scrollVertically(this.SCROLL_AMOUNT);\n                break;\n            case 'k': // Scroll up\n                this.scrollVertically(-this.SCROLL_AMOUNT);\n                break;\n            case 'h': // Previous page\n                this.navigatePrevious();\n                break;\n            case 'l': // Next page\n                this.navigateNext();\n                break;\n            case 'g': // Go to top\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n                break;\n            case 'G': // Go to bottom (Shift+g)\n                window.scrollTo({\n                    top: document.body.scrollHeight,\n                    behavior: 'smooth'\n                });\n                break;\n            case 't': // First tab/nav link\n                this.activateNavLink(0);\n                break;\n            case 'T': // Last tab/nav link\n                var navLinks = this.getNavLinks();\n                this.activateNavLink(navLinks.length - 1);\n                break;\n            case 'f': // Activate link selection mode for posts\n                this.activateLinkHints();\n                event.preventDefault();\n                break;\n            case 'a': // Go to About page\n                this.navigateToPath('/about/');\n                event.preventDefault();\n                break;\n            case 'p': // Go to Posts listing\n                this.navigateToPath('/posts/');\n                event.preventDefault();\n                break;\n            case 'H': // Go to Home\n                this.navigateToPath('/');\n                event.preventDefault();\n                break;\n            case '?': // Show help (on keydown)\n                this.showHelpModal();\n                break;\n        }\n    };\n    KeyboardNavigation.prototype.scrollVertically = function (amount) {\n        window.scrollBy({\n            top: amount,\n            behavior: 'smooth'\n        });\n    };\n    KeyboardNavigation.prototype.navigatePrevious = function () {\n        var prevLink = document.querySelector('.prev-post');\n        if (prevLink) {\n            prevLink.click();\n        }\n    };\n    KeyboardNavigation.prototype.navigateNext = function () {\n        var nextLink = document.querySelector('.next-post');\n        if (nextLink) {\n            nextLink.click();\n        }\n    };\n    KeyboardNavigation.prototype.activateNavLink = function (index) {\n        var navLinks = this.getNavLinks();\n        if (navLinks.length > index) {\n            navLinks[index].click();\n        }\n    };\n    KeyboardNavigation.prototype.getNavLinks = function () {\n        return Array.from(document.querySelectorAll('.terminal-menu a'));\n    };\n    KeyboardNavigation.prototype.isUserTyping = function () {\n        var element = document.activeElement;\n        return element instanceof HTMLInputElement ||\n            element instanceof HTMLTextAreaElement ||\n            element instanceof HTMLSelectElement ||\n            ((element === null || element === void 0 ? void 0 : element.hasAttribute('contenteditable')) || false);\n    };\n    KeyboardNavigation.prototype.addKeyboardShortcutsInfo = function () {\n        // Top nav button removed for minimalist design\n        var _this = this;\n        var _a;\n        // Create help modal (hidden by default)\n        var helpModal = document.createElement('div');\n        helpModal.id = 'keyboard-shortcuts-modal';\n        helpModal.className = 'help-modal';\n        helpModal.style.display = 'none';\n        helpModal.innerHTML = \"\\n      <div class=\\\"help-modal-content\\\">\\n        <h2>Keyboard Shortcuts</h2>\\n        <div class=\\\"shortcuts-grid\\\">\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">j</span>\\n            <span class=\\\"description\\\">Scroll down</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">k</span>\\n            <span class=\\\"description\\\">Scroll up</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">h</span>\\n            <span class=\\\"description\\\">Previous page</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">l</span>\\n            <span class=\\\"description\\\">Next page</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">g</span>\\n            <span class=\\\"description\\\">Go to top</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">G</span>\\n            <span class=\\\"description\\\">Go to bottom</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">f</span>\\n            <span class=\\\"description\\\">Show link numbers</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">a</span>\\n            <span class=\\\"description\\\">Go to About</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">p</span>\\n            <span class=\\\"description\\\">Go to Posts</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">H</span>\\n            <span class=\\\"description\\\">Go to Home</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">t</span>\\n            <span class=\\\"description\\\">First tab</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">T</span>\\n            <span class=\\\"description\\\">Last tab</span>\\n          </div>\\n          <div class=\\\"shortcut\\\">\\n            <span class=\\\"key\\\">?</span>\\n            <span class=\\\"description\\\">Hold to see this help</span>\\n          </div>\\n        </div>\\n        <button id=\\\"close-help-modal\\\">Close</button>\\n      </div>\\n    \";\n        document.body.appendChild(helpModal);\n        // Add event listener to close button\n        (_a = document.getElementById('close-help-modal')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', function () {\n            _this.hideHelpModal();\n        });\n        // Also close when clicking outside the modal content\n        helpModal.addEventListener('click', function (e) {\n            if (e.target === helpModal) {\n                _this.hideHelpModal();\n            }\n        });\n        // Add CSS for the modal\n        var styleSheet = document.createElement('style');\n        styleSheet.textContent = \"\\n      #keyboard-shortcuts {\\n        background: transparent;\\n        border: 1px solid var(--border-color);\\n        color: var(--text-color);\\n        border-radius: 50%;\\n        width: 24px;\\n        height: 24px;\\n        font-size: 14px;\\n        cursor: pointer;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        padding: 0;\\n        margin-left: 10px;\\n      }\\n      \\n      #keyboard-shortcuts:hover {\\n        background-color: var(--border-color);\\n      }\\n      \\n      .help-modal {\\n        display: none;\\n        position: fixed;\\n        z-index: 1000;\\n        left: 0;\\n        top: 0;\\n        width: 100%;\\n        height: 100%;\\n        background-color: rgba(0, 0, 0, 0.7);\\n        overflow: auto;\\n      }\\n      \\n      .help-modal-content {\\n        background-color: var(--bg-color);\\n        margin: 10% auto;\\n        padding: 20px;\\n        border: 1px solid var(--border-color);\\n        width: 80%;\\n        max-width: 600px;\\n        border-radius: 5px;\\n      }\\n      \\n      .shortcuts-grid {\\n        display: grid;\\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\\n        gap: 10px;\\n        margin: 20px 0;\\n      }\\n      \\n      .shortcut {\\n        display: flex;\\n        align-items: center;\\n      }\\n      \\n      .key {\\n        background-color: var(--code-bg);\\n        padding: 5px 10px;\\n        border-radius: 3px;\\n        margin-right: 10px;\\n        font-family: var(--mono-font);\\n        font-weight: bold;\\n        min-width: 20px;\\n        text-align: center;\\n      }\\n      \\n      #close-help-modal {\\n        background-color: var(--accent-color);\\n        color: var(--bg-color);\\n        border: none;\\n        padding: 8px 16px;\\n        font-family: var(--mono-font);\\n        cursor: pointer;\\n        border-radius: 3px;\\n      }\\n      \\n      #close-help-modal:hover {\\n        opacity: 0.9;\\n      }\\n    \";\n        document.head.appendChild(styleSheet);\n    };\n    KeyboardNavigation.prototype.showHelpModal = function () {\n        var modal = document.getElementById('keyboard-shortcuts-modal');\n        if (modal) {\n            modal.style.display = 'block';\n        }\n    };\n    KeyboardNavigation.prototype.hideHelpModal = function () {\n        var modal = document.getElementById('keyboard-shortcuts-modal');\n        if (modal) {\n            modal.style.display = 'none';\n        }\n    };\n    // Navigate to specific path\n    KeyboardNavigation.prototype.navigateToPath = function (path) {\n        var baseUrl = window.location.origin;\n        window.location.href = baseUrl + path;\n    };\n    // Activate link hints mode\n    KeyboardNavigation.prototype.activateLinkHints = function () {\n        // Get all post links on the page\n        this.postLinks = Array.from(document.querySelectorAll('.post-link'));\n        if (this.postLinks.length === 0) {\n            return; // No links to highlight\n        }\n        this.linkHintsActive = true;\n        this.linkHintsMap.clear();\n        // Create overlay to darken the page\n        var overlay = document.createElement('div');\n        overlay.id = 'link-hints-overlay';\n        overlay.className = 'link-hints-overlay';\n        document.body.appendChild(overlay);\n        // Add link numbers\n        var maxLinks = Math.min(this.postLinks.length, 9); // Only use digits 1-9\n        for (var i = 0; i < maxLinks; i++) {\n            var link = this.postLinks[i];\n            var hintNumber = (i + 1).toString();\n            // Create a hint element\n            var hint = document.createElement('span');\n            hint.className = 'link-hint';\n            hint.textContent = hintNumber;\n            // Position it over the link\n            var linkRect = link.getBoundingClientRect();\n            hint.style.top = \"\".concat(window.scrollY + linkRect.top - 10, \"px\");\n            hint.style.left = \"\".concat(window.scrollX + linkRect.left - 10, \"px\");\n            // Add to document\n            document.body.appendChild(hint);\n            // Store mapping\n            this.linkHintsMap.set(hintNumber, link);\n        }\n        // Add the CSS for hints\n        if (!document.getElementById('link-hints-style')) {\n            var style = document.createElement('style');\n            style.id = 'link-hints-style';\n            style.textContent = \"\\n        .link-hints-overlay {\\n          position: fixed;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          background-color: rgba(0, 0, 0, 0.3);\\n          z-index: 9000;\\n        }\\n        \\n        .link-hint {\\n          position: absolute;\\n          background-color: var(--accent-color);\\n          color: var(--bg-color);\\n          border-radius: 50%;\\n          width: 20px;\\n          height: 20px;\\n          font-size: 12px;\\n          font-weight: bold;\\n          font-family: var(--mono-font);\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n          z-index: 9001;\\n          box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\\n        }\\n      \";\n            document.head.appendChild(style);\n        }\n    };\n    // Deactivate link hints mode\n    KeyboardNavigation.prototype.deactivateLinkHints = function () {\n        this.linkHintsActive = false;\n        // Remove overlay\n        var overlay = document.getElementById('link-hints-overlay');\n        if (overlay) {\n            overlay.remove();\n        }\n        // Remove all hints\n        document.querySelectorAll('.link-hint').forEach(function (hint) {\n            hint.remove();\n        });\n    };\n    KeyboardNavigation.prototype.addKeyboardHint = function () {\n        var _this = this;\n        // Create a small hint element\n        var hint = document.createElement('div');\n        hint.id = 'keyboard-hint';\n        hint.className = 'keyboard-hint';\n        hint.innerHTML = \"<span class=\\\"key-icon\\\">?</span> <span class=\\\"hint-text\\\">Hold for shortcuts</span>\";\n        // Add to the bottom right of the screen\n        document.body.appendChild(hint);\n        // Add CSS for the hint\n        var style = document.createElement('style');\n        style.textContent = \"\\n      .keyboard-hint {\\n        position: fixed;\\n        bottom: 20px;\\n        right: 20px;\\n        background-color: var(--bg-color);\\n        border: 1px solid var(--border-color);\\n        border-radius: 5px;\\n        padding: 8px 12px;\\n        font-family: var(--mono-font);\\n        font-size: 14px;\\n        display: flex;\\n        align-items: center;\\n        opacity: 0.8;\\n        z-index: 100;\\n        transition: opacity 0.3s ease;\\n      }\\n      \\n      .keyboard-hint:hover {\\n        opacity: 1;\\n      }\\n      \\n      .key-icon {\\n        display: inline-block;\\n        background-color: var(--code-bg);\\n        padding: 2px 6px;\\n        border-radius: 3px;\\n        margin-right: 8px;\\n        font-weight: bold;\\n      }\\n      \\n      .hint-text {\\n        display: inline-block;\\n      }\\n      \\n      @media (max-width: 768px) {\\n        .keyboard-hint {\\n          display: none;\\n        }\\n      }\\n      \\n      /* First-time visitor notice */\\n      .onboarding-overlay {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background-color: rgba(0, 0, 0, 0.7);\\n        z-index: 2000;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        opacity: 0;\\n        transition: opacity 0.5s ease;\\n      }\\n      \\n      .onboarding-card {\\n        background-color: var(--bg-color);\\n        border-radius: 8px;\\n        padding: 24px;\\n        max-width: 500px;\\n        box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);\\n        text-align: center;\\n      }\\n      \\n      .onboarding-title {\\n        font-size: 1.5rem;\\n        margin-bottom: 16px;\\n        border-bottom: none;\\n      }\\n      \\n      .key-highlight {\\n        animation: pulse 2s infinite;\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        background-color: var(--code-bg);\\n        color: var(--accent-color);\\n        font-family: var(--mono-font);\\n        font-weight: bold;\\n        width: 40px;\\n        height: 40px;\\n        border-radius: 5px;\\n        margin: 20px auto;\\n        font-size: 24px;\\n      }\\n      \\n      @keyframes pulse {\\n        0% {\\n          transform: scale(1);\\n          box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);\\n        }\\n        \\n        70% {\\n          transform: scale(1.1);\\n          box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);\\n        }\\n        \\n        100% {\\n          transform: scale(1);\\n          box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);\\n        }\\n      }\\n      \\n      .onboarding-text {\\n        margin-bottom: 20px;\\n        line-height: 1.6;\\n      }\\n      \\n      .onboarding-buttons {\\n        display: flex;\\n        justify-content: center;\\n        gap: 10px;\\n      }\\n      \\n      .onboarding-button {\\n        padding: 8px 16px;\\n        border-radius: 4px;\\n        cursor: pointer;\\n        font-family: var(--mono-font);\\n        border: none;\\n      }\\n      \\n      .onboarding-primary {\\n        background-color: var(--accent-color);\\n        color: var(--bg-color);\\n      }\\n      \\n      .onboarding-secondary {\\n        background-color: transparent;\\n        border: 1px solid var(--border-color);\\n        color: var(--text-color);\\n      }\\n    \";\n        document.head.appendChild(style);\n        // Add a timeout to fade out the hint after a few seconds\n        setTimeout(function () {\n            hint.style.opacity = '0.4';\n        }, 5000);\n        // Show the hint more clearly when hovering\n        hint.addEventListener('mouseenter', function () {\n            hint.style.opacity = '1';\n        });\n        hint.addEventListener('mouseleave', function () {\n            hint.style.opacity = '0.4';\n        });\n        // Make the hint clickable to show shortcuts\n        hint.addEventListener('click', function () {\n            _this.showHelpModal();\n        });\n    };\n    KeyboardNavigation.prototype.showFirstTimeNotice = function () {\n        var _this = this;\n        var _a, _b;\n        // Check if we've shown this before\n        var hasSeenOnboarding = localStorage.getItem('keyboard-nav-onboarding');\n        if (hasSeenOnboarding === 'true') {\n            return;\n        }\n        // Create overlay\n        var overlay = document.createElement('div');\n        overlay.className = 'onboarding-overlay';\n        // Create card content\n        var card = document.createElement('div');\n        card.className = 'onboarding-card';\n        card.innerHTML = \"\\n      <h2 class=\\\"onboarding-title\\\">This blog has keyboard shortcuts!</h2>\\n      <div class=\\\"key-highlight\\\">?</div>\\n      <p class=\\\"onboarding-text\\\">\\n        Hold the <strong>?</strong> key anytime to see available shortcuts.<br/>\\n        Navigate using Vim-like keys - no clicking required.\\n      </p>\\n      <div class=\\\"onboarding-buttons\\\">\\n        <button class=\\\"onboarding-button onboarding-primary\\\" id=\\\"try-shortcuts\\\">Try it now</button>\\n        <button class=\\\"onboarding-button onboarding-secondary\\\" id=\\\"dismiss-onboarding\\\">Got it</button>\\n      </div>\\n    \";\n        overlay.appendChild(card);\n        document.body.appendChild(overlay);\n        // Trigger a fade-in animation\n        setTimeout(function () {\n            overlay.style.opacity = '1';\n        }, 500);\n        // Set up button actions\n        (_a = document.getElementById('try-shortcuts')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', function () {\n            _this.dismissOnboarding(overlay);\n            _this.showHelpModal();\n        });\n        (_b = document.getElementById('dismiss-onboarding')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', function () {\n            _this.dismissOnboarding(overlay);\n        });\n        // Also dismiss when pressing Escape\n        document.addEventListener('keydown', function (e) {\n            if (e.key === 'Escape' && overlay.parentNode) {\n                _this.dismissOnboarding(overlay);\n            }\n        });\n    };\n    KeyboardNavigation.prototype.dismissOnboarding = function (overlay) {\n        // Fade out\n        overlay.style.opacity = '0';\n        // Remove from DOM after animation\n        setTimeout(function () {\n            if (overlay.parentNode) {\n                overlay.parentNode.removeChild(overlay);\n            }\n        }, 500);\n        // Save preference\n        localStorage.setItem('keyboard-nav-onboarding', 'true');\n    };\n    return KeyboardNavigation;\n}());\n\n\n\n//# sourceURL=webpack://blog/./assets/ts/keyboard-nav.ts?");

/***/ }),

/***/ "./assets/ts/main.ts":
/*!***************************!*\
  !*** ./assets/ts/main.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./theme */ \"./assets/ts/theme.ts\");\n/* harmony import */ var _smooth_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./smooth-scroll */ \"./assets/ts/smooth-scroll.ts\");\n/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./animation */ \"./assets/ts/animation.ts\");\n/* harmony import */ var _keyboard_nav__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard-nav */ \"./assets/ts/keyboard-nav.ts\");\n\n\n\n\n// Initialize theme manager (dark/light mode)\nvar themeManager = new _theme__WEBPACK_IMPORTED_MODULE_0__.ThemeManager();\nthemeManager.init();\n// Initialize smooth scrolling\nvar smoothScroll = new _smooth_scroll__WEBPACK_IMPORTED_MODULE_1__.SmoothScroll();\nsmoothScroll.init();\n// Initialize animation manager (for aesthetic transitions)\nvar animationManager = new _animation__WEBPACK_IMPORTED_MODULE_2__.AnimationManager();\nanimationManager.init();\n// Initialize Vim-like keyboard navigation\nvar keyboardNav = new _keyboard_nav__WEBPACK_IMPORTED_MODULE_3__.KeyboardNavigation();\nkeyboardNav.init();\n\n\n//# sourceURL=webpack://blog/./assets/ts/main.ts?");

/***/ }),

/***/ "./assets/ts/smooth-scroll.ts":
/*!************************************!*\
  !*** ./assets/ts/smooth-scroll.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SmoothScroll: () => (/* binding */ SmoothScroll)\n/* harmony export */ });\nvar SmoothScroll = /** @class */ (function () {\n    function SmoothScroll() {\n        this.duration = 500; // ms\n    }\n    SmoothScroll.prototype.init = function () {\n        var _this = this;\n        document.querySelectorAll('a[href^=\"#\"]').forEach(function (anchor) {\n            anchor.addEventListener('click', function (e) {\n                e.preventDefault();\n                var targetId = anchor.getAttribute('href') || '';\n                var targetElement = document.querySelector(targetId);\n                if (targetElement) {\n                    _this.scrollTo(targetElement);\n                }\n            });\n        });\n    };\n    SmoothScroll.prototype.scrollTo = function (element) {\n        var _this = this;\n        var startPosition = window.scrollY;\n        var targetPosition = element.getBoundingClientRect().top + window.scrollY;\n        var distance = targetPosition - startPosition;\n        var startTime = null;\n        var animation = function (currentTime) {\n            if (startTime === null) {\n                startTime = currentTime;\n            }\n            var timeElapsed = currentTime - startTime;\n            var scrollProgress = Math.min(timeElapsed / _this.duration, 1);\n            var ease = _this.easeInOutCubic(scrollProgress);\n            window.scrollTo(0, startPosition + distance * ease);\n            if (timeElapsed < _this.duration) {\n                requestAnimationFrame(animation);\n            }\n        };\n        requestAnimationFrame(animation);\n    };\n    SmoothScroll.prototype.easeInOutCubic = function (t) {\n        return t < 0.5\n            ? 4 * t * t * t\n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    };\n    return SmoothScroll;\n}());\n\n\n\n//# sourceURL=webpack://blog/./assets/ts/smooth-scroll.ts?");

/***/ }),

/***/ "./assets/ts/theme.ts":
/*!****************************!*\
  !*** ./assets/ts/theme.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThemeManager: () => (/* binding */ ThemeManager)\n/* harmony export */ });\nvar ThemeManager = /** @class */ (function () {\n    function ThemeManager() {\n        this.storageKey = 'blog-theme-preference';\n        this.defaultTheme = 'dark';\n        var savedTheme = localStorage.getItem(this.storageKey);\n        this.currentTheme = savedTheme || this.defaultTheme;\n    }\n    ThemeManager.prototype.init = function () {\n        var _this = this;\n        this.applyTheme(this.currentTheme);\n        var themeToggle = document.getElementById('theme-toggle');\n        if (themeToggle) {\n            themeToggle.addEventListener('click', function () { return _this.toggleTheme(); });\n        }\n        this.updateToggleButton();\n    };\n    ThemeManager.prototype.applyTheme = function (theme) {\n        document.documentElement.setAttribute('data-theme', theme);\n        this.currentTheme = theme;\n        localStorage.setItem(this.storageKey, theme);\n    };\n    ThemeManager.prototype.toggleTheme = function () {\n        var newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';\n        this.applyTheme(newTheme);\n        this.updateToggleButton();\n    };\n    ThemeManager.prototype.updateToggleButton = function () {\n        var themeToggle = document.getElementById('theme-toggle');\n        if (themeToggle) {\n            themeToggle.textContent = this.currentTheme === 'dark'\n                ? '☀️ Light Mode'\n                : '🌙 Dark Mode';\n        }\n    };\n    return ThemeManager;\n}());\n\n\n\n//# sourceURL=webpack://blog/./assets/ts/theme.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/ts/main.ts");
/******/ 	
/******/ })()
;